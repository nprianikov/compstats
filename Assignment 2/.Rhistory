# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- logit_prob(predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Calculate the logistic probability for each observation
logit_prob <- function(x) {
plogis(logit_coefficient * x) # plogis is the logistic function in R
}
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- logit_prob(predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
}
return(list(p1 = p_values1, p2 = p_values2))
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Calculate the logistic probability for each observation
logit_prob <- function(x) {
plogis(logit_coefficient * x) # plogis is the logistic function in R
}
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- logit_prob(predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
return(list(p1 = p_values1, p2 = p_values2))
}
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 1
#results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
## Aggregate the p-values for each simulation
#p_values1 <- unlist(lapply(results, function(x) x$p1))
#p_values2 <- unlist(lapply(results, function(x) x$p2))
results = get_pvalues(p, n, ar_coefficient, prob, logit_coefficient)
p_values1 = results$p1
p_values2 = results$p2
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 1
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
#results = get_pvalues(p, n, ar_coefficient, prob, logit_coefficient)
#p_values1 = results$p1
#p_values2 = results$p2
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 1
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
#results = get_pvalues(p, n, ar_coefficient, prob, logit_coefficient)
#p_values1 = results$p1
#p_values2 = results$p2
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 100
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
#results = get_pvalues(p, n, ar_coefficient, prob, logit_coefficient)
#p_values1 = results$p1
#p_values2 = results$p2
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate the logistic probability for each observation
logit_prob <- function(x) {
plogis(logit_coefficient * x) # plogis is the logistic function in R
}
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- logit_prob(predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
return(list(p1 = p_values1, p2 = p_values2))
}
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 100
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 100
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 100
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate the logistic probability for each observation
logit_prob <- function(x) {
plogis(logit_coefficient * x) # plogis is the logistic function in R
}
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- plogis(logit_coefficient * predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
return(list(p1 = p_values1, p2 = p_values2))
}
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 100
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 1
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 10
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 10
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 500
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values1[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- plogis(logit_coefficient * predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
return(list(p1 = p_values1, p2 = p_values2))
}
get_pvalues <- function(p, n, ar_coefficient, prob, logit_coefficient){
# Simulate AR(1) processes for each predictor
X <- matrix(nrow = n, ncol = p)
for (i in 1:p) {
X[, i] <- arima.sim(n = n, model = list(ar = ar_coefficient))
}
# SIMULATION 1
Y1 <- rbinom(n, size = 1, prob = prob)
# Convert X matrix to a data frame for glm
X_df <- as.data.frame(X)
# Add Y to the data frame
X_df$Y1 <- Y1
# Fit a GLM model with all predictors
glm_model_1 <- glm(Y1 ~ ., data = X_df, family = binomial)
# Summary of the model to get p-values
p_values1 <- coef(summary(glm_model_1))[, "Pr(>|z|)"]
p_values1 <- p_values1[-1]  # Exclude the intercept (assuming it's the first coefficient)
# SIMULATION 2
# Initialize Y2
Y2 <- numeric(n)
# Calculate probabilities and simulate Y for each observation
for (i in 1:n) {
# Calculate the sum of predictors X2 to X21 for each observation
predictors_sum <- sum(X[i, 2:21])
# Calculate the logistic probability
prob_i <- plogis(logit_coefficient * predictors_sum)
# Simulate Y based on the calculated probability
Y2[i] <- rbinom(1, size = 1, prob = prob_i)
}
# Add Y_logistic to the data frame
X_df$Y2 <- Y2
# Fit a GLM model with all predictors for the logistic simulation
glm_model_2 <- glm(Y2 ~ ., data = X_df, family = binomial(link = "logit"))
# Summary of the model to get p-values
p_values2 <- coef(summary(glm_model_2))[, "Pr(>|z|)"]
p_values2 <- p_values2[-1]  # Exclude the intercept (assuming it's the first coefficient)
return(list(p1 = p_values1, p2 = p_values2))
}
# Parameters
p <- 200 # Number of predictors
n <- 500 # Number of observations for Y
ar_coefficient <- 0.5
prob <- 0.5
logit_coefficient <- 0.08
replications <- 10
set.seed(100)
results <- replicate(replications, get_pvalues(p, n, ar_coefficient, prob, logit_coefficient), simplify = FALSE)
# Aggregate the p-values for each simulation
p_values1 <- unlist(lapply(results, function(x) x$p1))
p_values2 <- unlist(lapply(results, function(x) x$p2))
hist(p_values1, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
hist(p_values2, breaks=25, main="Histogram of P-Values", xlab="P-Value", ylab="Frequency",
col="blue", border="black")
library(ggplot2)
library(tibble)
set.seed(101)
n <- 500
p <- 200
n_sim <- 10  # TODO: make this 10000
# Generate X as a single AR(1) time-series of size p
generate_AR1 <- function(n, p) {
X <- replicate(p, arima.sim(n=n, list(0.5)))
return(X)
}
# Function to generate responses for a given X
generate_responses <- function(n, p, prob = NULL) {
X <- generate_AR1(n=n, p=p)
if (is.null(prob)) {
prob <- plogis(0.08 * sum(X[2:22]))
}
Y <- rbinom(n, 1, prob)
fit <- glm(Y ~ X, family = binomial(link="logit"))
p_values <- summary(fit)$coef[, "Pr(>|z|)"][-1]
return(p_values)
}
# Combine the lists into a single tibble
df_plot <- tibble(
p_values_1 = c(replicate(n_sim, generate_responses(n=n, p=p, prob=0.5))),
p_values_2 = c(replicate(n_sim, generate_responses(n=n, p=p)))
)
library(cowplot)
install.packages("cowplot")
library(cowplot)
# Create histograms for each set of p-values
histogram_1 <- ggplot(df_plot, aes(x=p_values_1)) +
geom_histogram(color="red", fill="blue", bins=20, boundary=0) +
labs(x="P-values", y="count", title="Global Null, AR(1) Design") +
theme(plot.title = element_text(hjust = 0.5, face="bold"),
axis.title = element_text(face="bold")) +
scale_x_continuous(limits = c(0, 1))
histogram_2 <- ggplot(df_plot, aes(x=p_values_2)) +
geom_histogram(color="red", fill="blue", bins=20, boundary=0) +
labs(x="P-values", y="count", title="20 Nonzero Coefficients, AR(1) Design") +
theme(plot.title = element_text(hjust = 0.5, face="bold"),
axis.title = element_text(face="bold")) +
scale_x_continuous(limits = c(0, 1))
# Arrange the plots side by side
combined_plots <- plot_grid(histogram_1, histogram_2, ncol=2, shareY=TRUE)
# Display the combined plots
print(combined_plots)
